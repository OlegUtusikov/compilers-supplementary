-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval([state, world], statement) {
  case statement of
    Assn(name, expr) -> [state <- [name, evalExpr(state, expr)], world]
    | Seq(left, right) -> eval(eval([state, world], left), right)
    | Skip -> [state, world]
    | Read(name) -> (
      var t = readWorld(world);
      [state <- [name, t.fst], t.snd]
    )
    | Write(expr) -> [state, writeWorld(evalExpr(state, expr), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt(input, statement) {
  eval([emptyState, createWorld(input)], statement).snd.getOutput
}
