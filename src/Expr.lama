-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinaryOperation(opStr, left, right) {
  case opStr of
    "+" -> left + right
    | "-" -> left - right
    | "*" -> left * right
    | "/" -> left / right
    | "%" -> left % right
    | "==" -> left == right
    | "!=" -> left != right
    | "&&" -> left && right
    | "!!" -> left !! right
    | "<" -> left < right
    | ">" -> left > right
    | "<=" -> left <= right
    | ">=" -> left >= right
    | _ -> failure("Unkown operation: %s\n", opStr)
  esac
}

public fun evalExpr(state, expr) {
  case expr of
    Var(name) -> state(name)
    | Const(value) -> value
    | Binop(op, left, right) -> evalBinaryOperation(op, evalExpr(state, left), evalExpr(state, right))
    | _ -> failure("Unkown expression type")
  esac
}